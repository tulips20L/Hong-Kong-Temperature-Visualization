name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest nbformat nbconvert
    
    - name: Test Python modules
      run: |
        python -c "import src.config; print('✅ Config module imported successfully')"
        python -c "import src.data_fetcher; print('✅ Data fetcher module imported successfully')"
        python -c "import src.utils; print('✅ Utils module imported successfully')"
        python -c "import src.mandelbrot; print('✅ Mandelbrot module imported successfully')"
    
    - name: Test notebook execution (basic validation)
      run: |
        # Convert notebooks to Python scripts and check for syntax errors
        jupyter nbconvert --to python notebooks/*.ipynb --output-dir temp_test/
        find temp_test/ -name "*.py" -exec python -m py_compile {} \;
        echo "✅ Notebook syntax validation passed"
    
    - name: Test API connectivity (optional)
      continue-on-error: true
      run: |
        python -c "
        import src.data_fetcher as df
        try:
            temp, humidity, location = df.fetch_hk_temperature()
            print(f'✅ API test successful: {temp}°C at {location}')
        except:
            print('⚠️ API test failed (expected in CI environment)')
        "

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 88 (black default)
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/